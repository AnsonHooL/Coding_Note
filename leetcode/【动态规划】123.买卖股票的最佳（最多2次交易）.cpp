//
// Created by lenovo on 2020/12/28.
//

/**
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。


 * */






class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size()<=1) return 0;

        int dp1[3][500001] = {0}; ///不持有，第k次交易，第i天的利润
        int dp2[3][500001] = {0}; ///持有
        dp1[1][0] = 0;
        dp2[1][0] = -prices[0];
        dp1[2][0] = 0;
        dp2[2][0] = -prices[0];

        for(int i = 1; i < prices.size(); i++)
        {
            for(int k = 1; k <= 2; k++)
            {
                ///第k次交易不持有 = 昨天第k次交易不持有 or 昨天第k次交易持有，今天卖出
                dp1[k][i] = max(dp1[k][i-1], dp2[k][i-1] + prices[i]);

                if(k > 1)  ///第k次交易持有 = 昨天已经第k此交易并持有 or 昨天是k-1此交易卖出，今天买入
                    dp2[k][i] = max(dp2[k][i-1], dp1[k - 1][i-1] - prices[i]); ///昨天持有不动， 今天买入
                else if(k == 1)///第一次交易时候，若持有只能是当天买入的成本
                    dp2[k][i] = max(dp2[k][i-1], - prices[i]); ///昨天持有不动， 今天买入
            }

        }
        return max(dp1[2][prices.size() -1], dp1[1][prices.size() -1]); ///返回最大值
    }
};
