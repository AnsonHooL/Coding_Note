//
// Created by lenovo on 2020/12/28.
//

/**
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
*/


///思路二：用状态机套模板，和上一题几乎一毛一样只是不持有的状态方程改了丢丢

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size()<=1) return 0;
        int dp1[50001] = {0};
        int dp2[50001] = {0};
        dp1[0] = 0; //不持有
        dp2[0] = -prices[0];//持有
        for(int i = 1; i < prices.size(); i++)
        {
            dp1[i] = max(dp1[i-1], dp2[i-1] + prices[i]);
            dp2[i] = max(dp2[i-1], dp1[i-1] - prices[i]); ///昨天持有不动， 今天买入
        }
        return dp1[prices.size() -1];
    }
};