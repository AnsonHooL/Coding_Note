//
// Created by lenovo on 2020/12/17.
//
/**
给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]


 *
 *
 * */

///套模板
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() <= 1) return 0;
        int dp1[50001] = {0};
        int dp2[50001] = {0};
        dp1[0] = 0; //不持有
        dp2[0] = -prices[0];//持有
        for(int i = 1; i < prices.size(); i++)
        {
            dp1[i] = max(dp1[i-1], dp2[i-1] + prices[i]); ///昨天没持有今天不动， 昨天持有，今天买
            if(i > 1)
                dp2[i] = max(dp2[i-1], dp1[i-2] - prices[i]); ///昨天持有不动， 前天卖了，（不能昨天卖。冷静期）今天买入
            else
                dp2[i] = max(dp2[i-1], -prices[i]);
        }
        return dp1[prices.size() -1];
    }
};


///思路：用多维的动态规划做，方程是用每天的最高收益，推出下一天的最高收益
///注意这里是可以多次买卖的，多了一个状态，持有股票和不持有股票的最高收益
///当天的持有股票收益 = max{昨天持有股票，昨天不持有股票 + 今天买}
///当天的不持有股票收益 = max{昨天不持有股票 + 昨天持有股票+今天卖}



///和上面相反，思路一致
///dp1[i] = max(dp1[i-1], dp2[i-1] - prices[i]) （第二项表示在第i天买入股票）持有股票
///dp2[i] = max(dp2[i-1], dp1[i-1] + prices[i] - fee) （第二项表示在第i天将股票卖出，需扣除手续费）不持有股票